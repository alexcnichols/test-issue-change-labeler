name: Issue change labeler

on:
  issues:
    types: [edited, labeled, unlabeled]
  project_card: 
    types: [moved, deleted]

jobs:
  issue-change-labeler:
    runs-on: ubuntu-latest
    steps:
      - name: Label issue if changed
        uses: actions/github-script@v2
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            try {
              // Define the label to use to track changes
              const label_name = 'changed';
              const qualifying_labels = ['reviewed', 'endorsed'];
              
              // Check if the label being used to tracked changes was unlabeled and skip if so to avoid a loop
              if ('${{github.event.action}}' == 'unlabeled' && '${{github.event.label.name}}' == label_name) {
                core.info(`Skipping since the '${{github.event.label.name}}' label was removed.`);
                return;
              } else if ('${{github.event.action}}' == 'labeled' && qualifying_labels.find('${{github.event.label.name}}')) {
                core.info(`Skipping since the '${{github.event.label.name}}' qualifying label was applied.`);
                return;
              } else {
                core.info(`A '${{github.event_name}}.${{github.event.action}}' event action has been triggered.`);
              }
              
              // Get the issue number from the issue change or project board card change
              var issue_number;
              if (context.payload.issue !== undefined) {
                issue_number = context.payload.issue.number;
              } else if (
                context.payload.project_card !== undefined &&
                context.payload.project_card.content_url
              ) {
                issue_number = context.payload.project_card.content_url.split("/").pop();
              } else {
                core.setFailed("Unable to determine issue number.");
                return;
              }
              
              // Check if at least one of the qualifying label(s) are already on the issue
              const { data: existing_labels } = await github.issues.listLabelsOnIssue({
                issue_number: issue_number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                per_page: 100,
              });
              const match = existing_labels.filter(label => qualifying_labels.includes(label.name));
              core.info(match);
              core.info(match.length);
              if (match.length !== undefined && match.length > 0) {
                core.info(`One or more of the '${qualifying_labels.join()}' label(s) are on the issue.`);
              } else {
                core.info(`Skipping since the '${qualifying_labels.join()}' label(s) are not on the issue.`);
                return; 
              }
              
              // Apply the label for tracking changes to the issue
              await github.issues.addLabels({
                issue_number: issue_number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: [label_name],
              });
              core.info(`The '${label_name}' label was applied to issue #${issue_number}.`);
            } 
            catch (error) {
              core.setFailed(error.message);
            }
